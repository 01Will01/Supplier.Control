@using Supplier.Control.Presentation.Models.Supplier
@model SupplierCreateViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Incluir</h1>

<div>
    <a class="btn btn-primary" asp-action="Index">Voltar</a>
</div>

<br />
<div class="row" style="width: 100%; justify-content: center;">
    <div class="card text-white bg-dark mb-3" style="width: 60%; align-items: center;">
        <div class="card-header">
            Fornecedor
        </div>
        <div class="card-body">
            <form asp-action="Create" style="text-align: center;">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="SupplierModel.Name" class="control-label"></label>
                    <input asp-for="SupplierModel.Name" class="form-control" />
                    <span asp-validation-for="SupplierModel.Name" class="text-danger"></span>
                </div>

                <br />

                <div class="form-group">
                    <label asp-for="SupplierModel.Document" class="control-label"></label>
                    <input asp-for="SupplierModel.Document" class="form-control" />
                    <span asp-validation-for="SupplierModel.Document" class="text-danger"></span>
                </div>

                <br />

                <div class="btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-secondary active">
                        <input type="checkbox" checked autocomplete="off" asp-for="SupplierModel.IsActive"> @Html.DisplayNameFor(model => model.SupplierModel.IsActive)
                    </label>
                </div>

                <br />

                @{
                    string showSalve = Model.CanCreate ? "display: block;" : "display: none;";
                }
                <div class="form-group" style="@showSalve">
                    <input type="submit" class="btn btn-success" value="Salvar" />
                </div>
            </form>
        </div>
    </div>

    <p />
    <hr />

    @{
        string showGroupMessage = Model.HasResult ? "display: block;" : "display: none;";
        bool isMessageSuccess = Convert.ToBoolean(Model?.SuccessAction);

        string showMessageSuccess = isMessageSuccess ? "display: block;" : "display: none;";
        string showMessageAlert = isMessageSuccess ? "display: none" : "display: block;";

        string message = Model?.Message;
    }

    <div style="@showGroupMessage">

        <div class="alert alert-success alert-dismissible fade show" role="alert" style="@showMessageSuccess">
            <h4 class="alert-heading">Concluído!</h4>
            <p>Fornercedor cadastrado com sucesso.</p>
            <hr>
            <p class="mb-0">
                @message

                <button type="button" class="close btn btn-outline-dark" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </p>
        </div>

        <div class="alert alert-warning alert-dismissible fade show" role="alert" style="@showMessageAlert">
            <strong>Erro!</strong> Fornecedor não foi cadastrado.
            <hr>
            <p class="mb-0">
                @message

                <button type="button" class="close btn btn-outline-dark" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </p>
        </div>
    </div>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

<script>
    $().alert('dispose')
</script>
}
